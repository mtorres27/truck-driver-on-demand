.row
  .col-sm-8.col-xs-12
    h1 Job Postings
  .col-sm-4.col-xs-12.text-right.post_new_job
    = link_to "Post a New Job", new_company_job_path, class: "btn btn-primary", role: "button"

.tab-bar
  a.tab-bar__item href="#{company_projects_path}" class=("tab-bar__item--active" unless params[:closed])
    | Open Projects
  a.tab-bar__item href="#{company_projects_path(closed: true)}" class=("tab-bar__item--active" if params[:closed])
    | Closed Projects

- content_for :secondary do
  .action-bar
    h2.heading-h2.heading-h2--action-bar
      = "#{@projects.total_count} #{params[:closed] ? 'Closed' : 'Open'} Projects with a total of #{@job_count} jobs."
    .action-bar__actions
      button.btn.btn-secondary type="button" onClick="toggleJobs(this)" data-action="show"
        | Expand All

  .row
    .col-xs-12
      ol.list
        - @projects.each do |project|
          li.item
            .row.header
              .col-xs-8.col-md-9.col-lg-10
                h3
                  = "#{project.name} - #{project.external_project_id || project.id}"
                  = link_to content_tag(:span, "", class:"fa fa-pencil"), edit_company_project_path(project), class: "project_edit_link"
              .col-xs-4.col-md-3.col-lg-2.text-right
                button.btn.btn-secondary.item-btn data-toggle="collapse" data-target="#jobsFor#{project.id}" type="button" aria-expanded="false" aria-controls="jobsFor#{project.id}"
                  | #{project.jobs.size} Jobs
          .collapse.jobs( id="jobsFor#{project.id}" )
            .row.job-row
              - project.jobs.each do |job|
                = render partial: "job", locals: { project: project, job: job }

      = paginate @projects

javascript:
  var jobs = document.getElementsByClassName("jobs")

  var toggleJobs = function(caller) {
    show = caller.dataset.action == "show"
    if (show) {
      caller.innerText = caller.innerText.replace("EXPAND", "HIDE")
      caller.dataset.action = "hide"
    } else {
      caller.innerText = caller.innerText.replace("HIDE", "EXPAND")
      caller.dataset.action = "show"
    }

    filteredJobs = Array.prototype.filter.call(jobs, function(job) {
      return (show && !job.classList.contains("in")) || (!show && job.classList.contains("in"))
    })

    filteredJobs.forEach(function(ele) {
      if (show) {
        ele.classList.add("in")
      } else {
        ele.classList.remove("in")
      }
    })
  }
